import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Iris dataset from a local file
file_path = "/content/IRIS_ Flower_Dataset.csv"
column_names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "species"]
iris_data = pd.read_csv(file_path, names=column_names, skiprows=1)

# Perform exploratory data analysis
sns.pairplot(iris_data, hue='species')
plt.show()

# Clean the data (check for missing values)
missing_values = iris_data.isnull().sum()
print("Missing Values:\n", missing_values)

# No missing values in the Iris dataset, so no data cleaning needed

# Split the data into train-test sets
X = iris_data.iloc[:, :-1]
y = iris_data.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_classifier.fit(X_train, y_train)

# Evaluate the initial performance
y_pred_train = rf_classifier.predict(X_train)
initial_train_accuracy = accuracy_score(y_train, y_pred_train)
print(f"Initial Training Accuracy: {initial_train_accuracy:.2f}")

y_pred_test = rf_classifier.predict(X_test)
initial_test_accuracy = accuracy_score(y_test, y_pred_test)
print(f"Initial Test Accuracy: {initial_test_accuracy:.2f}")

# Hyper-parameter modification (e.g., changing the number of estimators)
rf_classifier_modified = RandomForestClassifier(n_estimators=200, random_state=42)

# Train the modified model
rf_classifier_modified.fit(X_train, y_train)

# Evaluate the performance after modification
y_pred_test_modified = rf_classifier_modified.predict(X_test)
modified_test_accuracy = accuracy_score(y_test, y_pred_test_modified)
print(f"Modified Test Accuracy: {modified_test_accuracy:.2f}")

# Save the model
model_filename = "iris_rf_model.pkl"
import joblib
joblib.dump(rf_classifier_modified, model_filename)
print(f"Model saved as {model_filename}")
